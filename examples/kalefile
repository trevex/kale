project("hello")

helm = require('helm', { 'version': '>=2.11.0' })
kubectl = require('kubectl', { 'version': '>=1.11.0' })

# global parameters
g = global_params({
    'global_opt': schema.string(default = "x")
})
# TODO: global params and params == modules? to use dot syntax?
dependency(
    git = '...',
    tag = 'v0.4.0',
    rename = 'different'
    enable_if = 'other.enabled' # TODO: should be lambda instead!
)

test = dependency(
    dir = '$pkg_dir/other',
    passive = true # allows triggering by hand
) # return value can be used to reference globals/targets/info

# what happens during target execution:
# 1. the parameters are collected
# 2. checksum is calculated from params + project-dir (TODO: should be set-able via project directive!)
# 3. a directory for the build-tmp+output is created in .kale/prefix-checksum
# or 3. if it exists skip!
# or 3. exist, but flag provided so re-create artifacts
# 4. copy output to output dir as required!
def build(params):
    manifests = helm.template(chart, var.namespace, var.release, params.values)
    return manifests # everything a target returns should be copied to output dir?
    # or: output(kustomize(manifests, patches), subdir='xy', no_project_dir=True)

# there is a default deploy target along these lines:
# kubectl.apply(manifests, dry_run=true)
# def apply(params):
#    manifests = input(build, run=True, glob='*.yaml', regex='...') # sby default lazy, should always output info!
#    kubectl.apply(manifests, dry_run=true)
# same goes for clean, delete (delete and apply depend on build!?)

target(build, params = {
    'values': schema.filename(required = true)
})

# how do params work?
# * params can be provided via:
#   * config file (subsections with dependency name to forward params to dependency)
#   * flags (where dependency name and a dash will be prepended)
#   * environment variables (prepend s.a.)
# * params are typesafe and are checked via schema
# * there are some default flags and variables, that are reserved and cannot be used => global
#
# good examples:
# * grafana with custom dashboards (via `rsync` into volume?)
# * scaling down etcd or cockroachdb
# * during cleanup (e.g. etcd-operator), checking whether another deployment still uses crds, if not clean them up

# plugin system!?
